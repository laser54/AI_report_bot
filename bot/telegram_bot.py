import sys
import os
import logging
from telebot import TeleBot, types
from datetime import datetime

sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from config.config import TELEGRAM_TOKEN, USER_ROLES, BOT_COMMANDS
from services.user_service import UserService
from services.team_service import TeamService
from services.report_service import ReportService

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot(TELEGRAM_TOKEN)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserState:
    IDLE = 'idle'  # –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    AWAITING_TEAM_SELECTION = 'awaiting_team_selection'  # –û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
    AWAITING_REGISTER_CONFIRMATION = 'awaiting_register_confirmation'  # –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    AWAITING_REPORT_DESCRIPTION = 'awaiting_report_description'  # –û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    AWAITING_REPORT_METRIC = 'awaiting_report_metric'  # –û–∂–∏–¥–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
    AWAITING_REPORT_METRIC_NAME = 'awaiting_report_metric_name'  # –û–∂–∏–¥–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
    AWAITING_ADMIN_ACTION = 'awaiting_admin_action'  # –û–∂–∏–¥–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data = {}

# –§—É–Ω–∫—Ü–∏–∏-—Ö–µ–ª–ø–µ—Ä—ã
def get_user_state(user_id):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    return user_states.get(user_id, UserState.IDLE)

def set_user_state(user_id, state):
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_states[user_id] = state

def reset_user_state(user_id):
    """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id in user_states:
        user_states.pop(user_id)
    if user_id in user_data:
        user_data.pop(user_id)

def get_markup_for_teams():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    markup = types.InlineKeyboardMarkup(row_width=2)
    teams = TeamService.get_all_teams()
    
    for team in teams:
        markup.add(types.InlineKeyboardButton(
            team.name, 
            callback_data=f"select_team_{team.id}"
        ))
    
    markup.add(types.InlineKeyboardButton("–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É", callback_data="create_new_team"))
    return markup

def get_main_menu_markup(user_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = UserService.get_user_by_telegram_id(user_id)
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    markup.add(types.KeyboardButton('üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç'))
    markup.add(types.KeyboardButton('üìã –ú–æ–∏ –æ—Ç—á–µ—Ç—ã'))
    markup.add(types.KeyboardButton('‚ÑπÔ∏è –ü–æ–º–æ—â—å'))
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if user and (user.role == USER_ROLES['MANAGER'] or user.role == USER_ROLES['ADMIN']):
        markup.add(types.KeyboardButton('üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é'))
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if user and user.role == USER_ROLES['ADMIN']:
        markup.add(types.KeyboardButton('üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏'))
        markup.add(types.KeyboardButton('üè¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏'))
    
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=[BOT_COMMANDS['START']])
def handle_start(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id
    reset_user_state(user_id)
    
    user = UserService.get_user_by_telegram_id(user_id)
    
    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        bot.send_message(
            user_id, 
            f"–ü—Ä–∏–≤–µ—Ç, {user.full_name}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n–í–∞—à–∞ —Ä–æ–ª—å: {user.role}\n–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞: {user.team.name if user.team else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}",
            reply_markup=get_main_menu_markup(user_id)
        )
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        bot.send_message(
            user_id, 
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}! –í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )

@bot.message_handler(commands=[BOT_COMMANDS['REGISTER']])
def handle_register(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /register"""
    user_id = message.from_user.id
    user = UserService.get_user_by_telegram_id(user_id)
    
    if user:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        bot.send_message(
            user_id, 
            f"–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.\n–í–∞—à–∞ —Ä–æ–ª—å: {user.role}\n–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞: {user.team.name if user.team else '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}",
            reply_markup=get_main_menu_markup(user_id)
        )
        return
    
    # –ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã
    bot.send_message(
        user_id, 
        "–î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É:",
        reply_markup=get_markup_for_teams()
    )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_data[user_id] = {
        'telegram_id': user_id,
        'username': message.from_user.username,
        'full_name': f"{message.from_user.first_name} {message.from_user.last_name if message.from_user.last_name else ''}"
    }
    
    set_user_state(user_id, UserState.AWAITING_TEAM_SELECTION)

@bot.message_handler(commands=[BOT_COMMANDS['REPORT']])
def handle_report_command(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /report –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞"""
    user_id = message.from_user.id
    user = UserService.get_user_by_telegram_id(user_id)
    
    if not user:
        bot.send_message(
            user_id, 
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    # –ó–∞–ø—Ä–æ—Å –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    bot.send_message(
        user_id, 
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏:"
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞
    user_data[user_id] = {
        'user_id': user.id,
        'team_id': user.team_id
    }
    
    set_user_state(user_id, UserState.AWAITING_REPORT_DESCRIPTION)

@bot.message_handler(commands=[BOT_COMMANDS['HELP']])
def handle_help(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìå *–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*

/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
/register - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ
/report - –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É

*–û–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞:*
–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç—ã –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö, –∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –æ—Ç–¥–µ–ª–∞–º.
    """
    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')

@bot.message_handler(commands=[BOT_COMMANDS['ADMIN']])
def handle_admin(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /admin –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤"""
    user_id = message.from_user.id
    
    if not UserService.is_admin(user_id):
        bot.send_message(
            user_id, 
            "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        return
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    markup.add(
        types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", callback_data="admin_manage_users"),
        types.InlineKeyboardButton("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–∞–º–∏", callback_data="admin_manage_teams")
    )
    
    bot.send_message(
        user_id, 
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )
    
    set_user_state(user_id, UserState.AWAITING_ADMIN_ACTION)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == UserState.AWAITING_REPORT_DESCRIPTION)
def handle_report_description(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    user_id = message.from_user.id
    description = message.text.strip()
    
    if not description:
        bot.send_message(
            user_id, 
            "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
    user_data[user_id]['description'] = description
    
    # –ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ —á–∏—Å–ª–æ–≤–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("–î–∞", callback_data="report_add_metric"),
        types.InlineKeyboardButton("–ù–µ—Ç", callback_data="report_no_metric")
    )
    
    bot.send_message(
        user_id, 
        "–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á–∏—Å–ª–æ–≤–æ–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å –∫ –æ—Ç—á–µ—Ç—É?",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == UserState.AWAITING_REPORT_METRIC_NAME)
def handle_report_metric_name(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    metric_name = message.text.strip()
    
    if not metric_name:
        bot.send_message(
            user_id, 
            "–ù–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
    user_data[user_id]['metric_name'] = metric_name
    
    # –ó–∞–ø—Ä–æ—Å –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
    bot.send_message(
        user_id, 
        f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è '{metric_name}':"
    )
    
    set_user_state(user_id, UserState.AWAITING_REPORT_METRIC)

@bot.message_handler(func=lambda message: get_user_state(message.from_user.id) == UserState.AWAITING_REPORT_METRIC)
def handle_report_metric_value(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è"""
    user_id = message.from_user.id
    metric_value_text = message.text.strip()
    
    try:
        metric_value = float(metric_value_text.replace(',', '.'))
        user_data[user_id]['metric_value'] = metric_value
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = ReportService.create_report(
            user_id=user_data[user_id]['user_id'],
            team_id=user_data[user_id]['team_id'],
            description=user_data[user_id]['description'],
            metric_name=user_data[user_id]['metric_name'],
            metric_value=metric_value
        )
        
        if report:
            bot.send_message(
                user_id, 
                f"–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n–û–ø–∏—Å–∞–Ω–∏–µ: {report.description}\n–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å: {report.metric_name}: {report.metric_value}",
                reply_markup=get_main_menu_markup(user_id)
            )
        else:
            bot.send_message(
                user_id, 
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                reply_markup=get_main_menu_markup(user_id)
            )
        
        reset_user_state(user_id)
    except ValueError:
        bot.send_message(
            user_id, 
            "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —á–∏—Å–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 42 –∏–ª–∏ 3.14):"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("select_team_"))
def handle_team_selection(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–º–∞–Ω–¥—ã –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user_id = call.from_user.id
    team_id = int(call.data.split("_")[2])
    
    if get_user_state(user_id) != UserState.AWAITING_TEAM_SELECTION:
        return
    
    team = TeamService.get_team_by_id(team_id)
    if not team:
        bot.send_message(
            user_id, 
            "–í—ã–±—Ä–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
    user_data[user_id]['team_id'] = team_id
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = UserService.create_user(
        telegram_id=user_data[user_id]['telegram_id'],
        username=user_data[user_id]['username'],
        full_name=user_data[user_id]['full_name'],
        role=USER_ROLES['EMPLOYEE'],  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
        team_id=team_id
    )
    
    if user:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n–í–∞—à–∞ —Ä–æ–ª—å: {user.role}\n–í–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞: {team.name}"
        )
        
        bot.send_message(
            user_id,
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ—Ç—á–µ—Ç—ã –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /report –∏–ª–∏ –Ω–∞–∂–∞–≤ –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é.",
            reply_markup=get_main_menu_markup(user_id)
        )
    else:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        )
    
    reset_user_state(user_id)

@bot.callback_query_handler(func=lambda call: call.data == "create_new_team")
def handle_create_new_team(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã"""
    user_id = call.from_user.id
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã."
    )
    
    bot.send_message(
        user_id,
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:",
        reply_markup=get_markup_for_teams()
    )

@bot.callback_query_handler(func=lambda call: call.data == "report_add_metric")
def handle_add_metric(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è"""
    user_id = call.from_user.id
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫'):"
    )
    
    set_user_state(user_id, UserState.AWAITING_REPORT_METRIC_NAME)

@bot.callback_query_handler(func=lambda call: call.data == "report_no_metric")
def handle_no_metric(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–∞–∑–∞ –æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è"""
    user_id = call.from_user.id
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –±–µ–∑ —á–∏—Å–ª–æ–≤–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è
    report = ReportService.create_report(
        user_id=user_data[user_id]['user_id'],
        team_id=user_data[user_id]['team_id'],
        description=user_data[user_id]['description']
    )
    
    if report:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!"
        )
        
        bot.send_message(
            user_id,
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {report.description}",
            reply_markup=get_main_menu_markup(user_id)
        )
    else:
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
    
    reset_user_state(user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é
@bot.message_handler(func=lambda message: message.text == 'üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç')
def handle_send_report_button(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞"""
    handle_report_command(message)

@bot.message_handler(func=lambda message: message.text == 'üìã –ú–æ–∏ –æ—Ç—á–µ—Ç—ã')
def handle_my_reports_button(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–∏—Ö –æ—Ç—á–µ—Ç–æ–≤"""
    user_id = message.from_user.id
    user = UserService.get_user_by_telegram_id(user_id)
    
    if not user:
        bot.send_message(
            user_id, 
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    reports = ReportService.get_user_reports(user.id)
    
    if not reports:
        bot.send_message(
            user_id, 
            "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤."
        )
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 5 –æ—Ç—á–µ—Ç–æ–≤
    response = "–í–∞—à–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã:\n\n"
    
    for i, report in enumerate(reports[:5], 1):
        response += f"{i}. –î–∞—Ç–∞: {report.report_date.strftime('%d.%m.%Y')}\n"
        response += f"   –û–ø–∏—Å–∞–Ω–∏–µ: {report.description}\n"
        
        if report.metric_name and report.metric_value:
            response += f"   {report.metric_name}: {report.metric_value}\n"
        
        response += "\n"
    
    bot.send_message(user_id, response)

@bot.message_handler(func=lambda message: message.text == 'üìä –ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç –∑–∞ –Ω–µ–¥–µ–ª—é')
def handle_weekly_report_button(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    user_id = message.from_user.id
    user = UserService.get_user_by_telegram_id(user_id)
    
    if not user or (user.role != USER_ROLES['MANAGER'] and user.role != USER_ROLES['ADMIN']):
        bot.send_message(
            user_id, 
            "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏."
        )
        return
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
    team_id = user.team_id if user.role == USER_ROLES['MANAGER'] else None  # –î–ª—è –∞–¥–º–∏–Ω–∞ - –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
    summary = ReportService.generate_weekly_summary(team_id)
    
    bot.send_message(user_id, summary)

@bot.message_handler(func=lambda message: message.text == '‚ÑπÔ∏è –ü–æ–º–æ—â—å')
def handle_help_button(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏"""
    handle_help(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(func=lambda message: True)
def handle_unknown(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    user = UserService.get_user_by_telegram_id(user_id)
    
    if not user:
        bot.send_message(
            user_id, 
            "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return
    
    bot.send_message(
        user_id, 
        "–ù–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.",
        reply_markup=get_main_menu_markup(user_id)
    )

def start_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    bot.polling(none_stop=True, interval=0)

if __name__ == "__main__":
    start_bot() 